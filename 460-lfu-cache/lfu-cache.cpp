#include <map>
#include <unordered_map>
#include <fstream>
using namespace std;

class LFUCache { class Node{ public: int key; int value; int freq; Node* prev; Node* next; Node(int _key, int _value, int _freq){ key = _key; value = _value; freq = _freq; prev = nullptr; next = nullptr; } }; public: int size; map<int, pair<Node*, Node*>> freqList; unordered_map<int, Node*> cache; LFUCache(int capacity) { size = capacity; } int get(int key) { if (cache.find(key) == cache.end()) return -1; int freq = 1; freq += cache[key] -> freq; deleteNode(cache[key]); checkFreq(cache[key] -> freq); if (freqList.find(freq) == freqList.end()) initFreq(freq); Node* temp = new Node(key, cache[key] -> value, freq); addNode(temp); cache[key] = temp; return temp -> value; } void put(int key, int value) { int freq = 1; if (cache.find(key) != cache.end()){ freq += cache[key] -> freq; deleteNode(cache[key]); checkFreq(cache[key] -> freq); } else { if (cache.size() == size){ int leastFreq = (*freqList.begin()).first; removeLFU(leastFreq); } } if (freqList.find(freq) == freqList.end()) initFreq(freq); Node* temp = new Node(key, value, freq); addNode(temp); cache[key] = temp; } void printCache(){ for (auto p: freqList) printFreq(p.first); cout << endl; } void printFreq(int freq){ Node* head = freqList[freq].first; Node* tail = freqList[freq].second; Node* temp = head; while (temp != tail){ cout << temp -> key << ", "; cout << temp -> value << ", "; cout << temp -> freq << " | "; temp = temp -> next; } cout << endl; } void initFreq(int freq){ Node* head = new Node(-1, -1, freq); Node* tail = new Node(-1, -1, freq); head -> next = tail; tail -> prev = head; freqList[freq] = {head, tail}; } void checkFreq(int freq){ Node* head = freqList[freq].first; Node* tail = freqList[freq].second; if (head -> next == tail){ freqList.erase(freq); } } void removeLFU(int freq){ removeLRU(freq); checkFreq(freq); } void removeLRU(int freq){ Node* tail = freqList[freq].second; Node* temp = tail -> prev; deleteNode(temp); cache.erase(temp -> key); } void addNode(Node *temp){ int freq = temp -> freq; Node* head = freqList[freq].first; Node* next = head -> next; head -> next = temp; temp -> prev = head; temp -> next = next; next -> prev = temp; } void deleteNode(Node *temp){ Node* prev = temp -> prev; Node* next = temp -> next; prev -> next = next; next -> prev = prev; } }; auto init = atexit([]() {ofstream("display_runtime.txt") << "0";});